knitr::opts_chunk$set(echo = TRUE)
library(sp)
library(raster)
library(RColorBrewer)
library(lattice)
library(latticeExtra)
library(rasterVis)
# Read raster data
elev <- raster("data/ASTGTM2_N56E037_dem.tif")
elev
elev
library(sp)
library(raster)
library(rgdal)
library(rasterVis)
# let’s make some objects of Spatial* class from scratch
longitude <- c(-116.7, -120.4, -116.7, -113.5, -115.5, -120.8, -119.5, -113.7, -113.7, -110.7)
latitude <- c(45.3, 42.6, 38.9, 42.1, 35.7, 38.9, 36.2, 39, 41.6, 36.9)
longitude
latitude
lonlat
lonlat <- cbind(longitude, latitude)
lonlat
pts
SpatialPoints
pts <- SpatialPoints(lonlat)
pts
pts
str(pts)
library(sp)
library(raster)
SpatialLines()
?`Spatial-class`
?`SpatialPoints-class`
SpatialPoints
?SpatialPoints
?SpatialPoints
knitr::opts_chunk$set(echo = TRUE)
# Let’s make some objects of Spatial* class from scratch
longitude <- c(-116.7, -120.4, -116.7, -113.5, -115.5, -120.8, -119.5, -113.7, -113.7, -110.7)
latitude <- c(45.3, 42.6, 38.9, 42.1, 35.7, 38.9, 36.2, 39, 41.6, 36.9)
lonlat <- cbind(longitude, latitude)
pts <- SpatialPoints(lonlat)
# Set the coordinate reference system
crdref <- CRS('+proj=longlat +datum=WGS84')
pts <- SpatialPoints(coords = lonlat, proj4string = crdref)
pts
longitude <- sample(-180:180, 10, replace = T)
latitude <- sample(-90:90, 10, replace = T)
lonlat <- cbind(longitude, latitude)
pts <- SpatialPoints(lonlat)
pts
plot(pst)
plot(pts)
plot(pts, axes = T)
# Let’s make some objects of Spatial* class from scratch
set.seed(9)
longitude <- sample(-180:180, 10, replace = T)
latitude <- sample(-90:90, 10, replace = T)
lonlat <- cbind(longitude, latitude)
pts <- SpatialPoints(lonlat)
pts
str(pts)
?CRS
crdref <- CRS('+proj=longlat +datum=WGS84')
CRS
sp::CRS('+proj=longlat +datum=WGS84')
# Set the coordinate reference system
WGS84 <- CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs')
pts <- SpatialPoints(coords = lonlat, proj4string = WGS84)
# Set the coordinate reference system
WGS84 <- CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs')
pts <- SpatialPoints(coords = lonlat, proj4string = WGS84)
pts
# lon <- c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
# lat <- c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
# lonlat <- cbind(lon, lat)
lns <- spLines(lonlat, crs=WGS84)
pols <- spPolygons(lonlat, crs=WGS84)
# Create maps
plot(pols, border = "blue", col = "yellow", axes = T) # plot polygon
points(pts, pch = 20, col = "red", cex = 2)           # plot points
plot(pols, col = "yellow", axes = T) # plot polygon
plot(lns, col = "red", add = T)
plot(lns, col = "red", add = T)
plot(lns, "red", add = T)
lns
plot(lns, add = T)
# lon <- c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
# lat <- c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
# lonlat <- cbind(lon, lat)
lns <- spLines(lonlat, crs=WGS84)
pols <- spPolygons(lonlat, crs=WGS84)
# Create maps
plot(pols, col = "yellow", axes = T) # plot polygon
plot(lns, add = T)
points(pts, pch = 20, col = "red", cex = 2)           # plot points
# lon <- c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
# lat <- c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
# lonlat <- cbind(lon, lat)
lns <- spLines(lonlat, crs=WGS84)
pols <- spPolygons(lonlat, crs=WGS84)
# Create maps
plot(pols, col = "yellow", axes = T) # plot polygon
plot(lns, col = "red", add = T)
points(pts, pch = 20, col = "red", cex = 2)           # plot points
# Create maps
plot(pols, col = "yellow", axes = T) # plot polygon
plot(lns, col = "red", add = T)
points(pts, pch = 20, col = "red", cex = 2)           # plot points
lines(lns, col = "red", add = T)
?lines
lines(lns, add = T)
# lon <- c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
# lat <- c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
# lonlat <- cbind(lon, lat)
lns <- spLines(lonlat, crs=WGS84)
pols <- spPolygons(lonlat, crs=WGS84)
lns
pols
plot(pols, col = "yellow", axes = T)
plot(pols, col = "yellow", pch = 0, axes = T)
plot(pols, col = "yellow", cex = 0, axes = T)
plot(pols, col = "yellow", cex = 0.1, axes = T)
plot(pols, col = "steelblue", axes = T)
plot(pols, col = "#e5f5f9", axes = T)
plot(pols, col = "#e5f5f9", axes = T) # plot polygon
plot(lns, col = "#99d8c9", add = T)   # add lines
plot(lns, col = "#2ca25f", add = T)   # add points
plot(pols, col = "#e5f5f9", axes = T) # plot polygon
plot(lns, col = "#99d8c9", add = T)   # add lines
plot(pts, col = "#2ca25f", add = T)   # add points
plot(pols, col = "#e5f5f9", axes = T) # plot polygon
plot(lns, col = "#99d8c9", add = T)   # add lines
plot(pts, col = "#2ca25f", pch = 20, add = T)   # add points
set.seed(12)
# Широта
latitude <- sample(-90:90, 10, replace = T)
# Долгота
longitude <- sample(-180:180, 10, replace = T)
lonlat <- cbind(longitude, latitude)
pts <- SpatialPoints(coords = lonlat)
# Посмотрим на структуру объекта
str(pts)
# Set the coordinate reference system
WGS84 <- CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs')
pts <- SpatialPoints(coords = lonlat, proj4string = WGS84)
pts
# lon <- c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
# lat <- c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
# lonlat <- cbind(lon, lat)
lns <- spLines(lonlat, crs=WGS84)
pols <- spPolygons(lonlat, crs=WGS84)
lns
pols
plot(pols, col = "#e5f5f9", axes = T) # plot polygon
plot(lns, col = "#99d8c9", add = T)   # add lines
plot(pts, col = "#2ca25f", pch = 20, add = T)   # add points
library(rgdal)
rgdal
?RGDAL
pts@data <- lonlat
?SpatialPointsDataFrame
df <- data.frame(ID=1:nrow(lonlat), precip=(latitude-30)^3)
View(df)
df <- data.frame(ID=1:nrow(lonlat), precip=(log(latitude)))
View(df)
df <- data.frame(ID=1:nrow(lonlat), precip=((latitude-30)^3))
View(df)
df <- data.frame(ID=1:nrow(lonlat), precip=((latitude-30)^2))
View(df)
df
df
str(df)
ptsdf <- SpatialPointsDataFrame(pts, df)
ptsdf
#
plot(pts, col = "#2ca25f", pch = 20, cex = ptsdf$precip)
#
plot(pts, col = "#2ca25f", pch = 20, cex = log(ptsdf$precip))
# Создадим data.frame с данными
df <- data.frame(ID=1:nrow(lonlat), precip=((latitude-30)^2))
ptsdf <- SpatialPointsDataFrame(pts, df)
# Визуализируем
plot(pols, col = "#e5f5f9", axes = T)           # plot polygon
plot(lns, col = "#99d8c9", add = T)             # add lines
plot(ptsdf, col = "#2ca25f", pch = 20,
cex = ptsdf$precip,
add = T)   # add points
# Создадим data.frame с данными
df <- data.frame(ID=1:nrow(lonlat), precip=((latitude-30)^2))
ptsdf <- SpatialPointsDataFrame(pts, df)
# Визуализируем
plot(pols, col = "#e5f5f9", axes = T)           # plot polygon
plot(lns, col = "#99d8c9", add = T)             # add lines
plot(ptsdf, col = "#2ca25f", pch = 20,
cex = log(ptsdf$precip),
add = T)   # add points
norm(ptsdf$precip
norm)
norm(ptsdf$precip)
plot(pols, col = "#e5f5f9", axes = T)           # plot polygon
plot(lns, col = "#99d8c9", add = T)             # add lines
plot(ptsdf, col = "#2ca25f", pch = 20,
cex = log2(ptsdf$precip),
add = T)
# Создадим data.frame с данными
df <- data.frame(ID=1:nrow(lonlat), precip=(latitude-30))
ptsdf <- SpatialPointsDataFrame(pts, df)
# Визуализируем
plot(pols, col = "#e5f5f9", axes = T)           # plot polygon
plot(lns, col = "#99d8c9", add = T)             # add lines
# Создадим data.frame с данными
df <- data.frame(ID=1:nrow(lonlat), precip=(latitude-30))
ptsdf <- SpatialPointsDataFrame(pts, df)
# Визуализируем
plot(pols, col = "#e5f5f9", axes = T)           # plot polygon
plot(lns, col = "#99d8c9", add = T)             # add lines
plot(ptsdf, col = "#2ca25f", pch = 20,
cex = log2(ptsdf$precip),
add = T)   # add points
# Создадим data.frame с данными
df <- data.frame(ID=1:nrow(lonlat), precip=(latitude-30))
ptsdf <- SpatialPointsDataFrame(pts, df)
# Визуализируем
plot(pols, col = "#e5f5f9", axes = T)           # plot polygon
plot(lns, col = "#99d8c9", add = T)             # add lines
plot(ptsdf, col = "#2ca25f", pch = 20,
cex = log(ptsdf$precip),
add = T)   # add points
# Создадим data.frame с данными
df <- data.frame(ID=1:nrow(lonlat), precip=(latitude-30)^2)
ptsdf <- SpatialPointsDataFrame(pts, df)
# Визуализируем
plot(pols, col = "#e5f5f9", axes = T)           # plot polygon
plot(lns, col = "#99d8c9", add = T)             # add lines
plot(ptsdf, col = "#2ca25f", pch = 20,
cex = log(ptsdf$precip),
add = T)   # add points
# Создадим data.frame с данными
df <- data.frame(ID=1:nrow(lonlat), precip=(latitude-100)^2)
ptsdf <- SpatialPointsDataFrame(pts, df)
# Визуализируем
plot(pols, col = "#e5f5f9", axes = T)           # plot polygon
plot(lns, col = "#99d8c9", add = T)             # add lines
plot(ptsdf, col = "#2ca25f", pch = 20,
cex = log(ptsdf$precip),
add = T)   # add points
View(df)
# Создадим data.frame с данными
df <- data.frame(ID=1:nrow(lonlat), precip=(longitude-100)^2)
ptsdf <- SpatialPointsDataFrame(pts, df)
# Визуализируем
plot(pols, col = "#e5f5f9", axes = T)           # plot polygon
plot(lns, col = "#99d8c9", add = T)             # add lines
plot(ptsdf, col = "#2ca25f", pch = 20,
cex = log(ptsdf$precip),
add = T)   # add points
# Создадим data.frame с данными
df <- data.frame(ID=1:nrow(lonlat), precip=longitude/max(longtitude))
# Создадим data.frame с данными
df <- data.frame(ID=1:nrow(lonlat), precip=longitude/max(longitude))
ptsdf <- SpatialPointsDataFrame(pts, df)
# Визуализируем
plot(pols, col = "#e5f5f9", axes = T)           # plot polygon
plot(lns, col = "#99d8c9", add = T)             # add lines
plot(ptsdf, col = "#2ca25f", pch = 20,
cex = log(ptsdf$precip),
add = T)   # add points
# Создадим data.frame с данными
df <- data.frame(ID=1:nrow(lonlat), precip=longitude/max(longitude)*100)
ptsdf <- SpatialPointsDataFrame(pts, df)
# Визуализируем
plot(pols, col = "#e5f5f9", axes = T)           # plot polygon
plot(lns, col = "#99d8c9", add = T)             # add lines
plot(ptsdf, col = "#2ca25f", pch = 20,
cex = log(ptsdf$precip),
add = T)   # add points
# Создадим data.frame с данными
df <- data.frame(ID=1:nrow(lonlat), precip=longitude/max(longitude)*100)
ptsdf <- SpatialPointsDataFrame(pts, df)
# Визуализируем
plot(pols, col = "#e5f5f9", axes = T)           # plot polygon
plot(lns, col = "#99d8c9", add = T)             # add lines
plot(ptsdf, col = "#2ca25f", pch = 20,
cex = log2(ptsdf$precip),
add = T)   # add points
# Создадим data.frame с данными
df <- data.frame(ID=1:nrow(lonlat), precip=longitude^2/max(longitude)*100)
ptsdf <- SpatialPointsDataFrame(pts, df)
# Визуализируем
plot(pols, col = "#e5f5f9", axes = T)           # plot polygon
plot(lns, col = "#99d8c9", add = T)             # add lines
plot(ptsdf, col = "#2ca25f", pch = 20,
cex = log2(ptsdf$precip),
add = T)   # add points
# Создадим data.frame с данными
df <- data.frame(ID=1:nrow(lonlat), precip=longitude^2/max(longitude)*100)
ptsdf <- SpatialPointsDataFrame(pts, df)
# Визуализируем
plot(pols, col = "#e5f5f9", axes = T)           # plot polygon
plot(lns, col = "#99d8c9", add = T)             # add lines
plot(ptsdf, col = "#2ca25f", pch = 20,
cex = log(ptsdf$precip),
add = T)   # add points
# Создадим data.frame с данными
df <- data.frame(ID=1:nrow(lonlat), precip=longitude^2/max(longitude)*10)
ptsdf <- SpatialPointsDataFrame(pts, df)
# Визуализируем
plot(pols, col = "#e5f5f9", axes = T)           # plot polygon
plot(lns, col = "#99d8c9", add = T)             # add lines
plot(ptsdf, col = "#2ca25f", pch = 20,
cex = log(ptsdf$precip),
add = T)   # add points
# Создадим data.frame с данными
df <- data.frame(ID=1:nrow(lonlat), precip=longitude^2/max(longitude)*10)
# Получилась вот такая табличечка
df
# Соединяем геометрию и атрибуты
ptsdf <- SpatialPointsDataFrame(pts, df)
# Визуализируем
plot(pols, col = "#e5f5f9", axes = T)           # plot polygon
plot(lns, col = "#99d8c9", add = T)             # add lines
plot(ptsdf, col = "#2ca25f", pch = 20,
cex = log(ptsdf$precip),                   # устанавливаем размер точек
add = T)
# Создадим data.frame с данными
df <- data.frame(ID=1:nrow(lonlat), var=longitude^2/max(longitude)*10)
# Получилась вот такая табличечка
df
# Соединяем геометрию и атрибуты
ptsdf <- SpatialPointsDataFrame(pts, df)
# Визуализируем
plot(pols, col = "#e5f5f9", axes = T)           # plot polygon
plot(lns, col = "#99d8c9", add = T)             # add lines
plot(ptsdf, col = "#2ca25f", pch = 20,
cex = log(ptsdf$precip),                   # устанавливаем размер точек
add = T)
# Создадим data.frame с данными
df <- data.frame(ID=1:nrow(lonlat), var=longitude^2/max(longitude)*10)
# Получилась вот такая табличечка
df
# Соединяем геометрию и атрибуты
ptsdf <- SpatialPointsDataFrame(pts, df)
# Визуализируем
plot(pols, col = "#e5f5f9", axes = T)           # plot polygon
plot(lns, col = "#99d8c9", add = T)             # add lines
plot(ptsdf, col = "#2ca25f", pch = 20,
cex = log(ptsdf$var),                   # устанавливаем размер точек
add = T)
http://cran-logs.rstudio.com/2018/2018-07-19-r.csv.gz
?sf
library("sf", lib.loc="~/Library/R/3.3/library")
countries <- shapefile("data/countries/ne_50m_admin_0_countries.shp")
countries
plot(countries)
countries
countries@data
countries
View((countries@data)
countries
View(countries@data)
countries
summary(countries@data)
View((countries@data)
View(countries@data)
countries
View(countries@data)
